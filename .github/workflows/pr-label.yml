name: 'Read and Label Pull Request'
concurrency:  #avoid concurrent runs on label events, might cause issues on super fast commits
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled, unlabeled, edited]

jobs:
  label:
    runs-on: ubuntu-latest
    name: 'Read pull request context'
    outputs:
      release-type: ${{ steps.parse-labels.outputs.release-type }}
      change-type: ${{ steps.parse-labels.outputs.change-type }}
      prerelease-type: ${{ steps.parse-labels.outputs.prerelease-type }}
      is-merge-event: >-
        ${{ github.event_name == 'pull_request_target'
         && github.event.action == 'closed'
         && github.event.pull_request.merged == true }}
    permissions:
      issues: write
      pull-requests: write
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          path: src
          fetch-depth: 0
      - name: Parse and Add Labels
        id: parse-labels
        uses: actions/github-script@v7
        with:
          script: |
            const script = require('./src/.github/scripts/pr-scripts/parse-add-labels.js')
            await script({github, context, core})
      - name: Validate Pre-Release Branch
        if: steps.parse-labels.outputs.prerelease-type != ''
        id: validate_branch
        working-directory: src
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          TARGET_BRANCH="${{ github.event.pull_request.base.ref }}"
          if [[ ! "$TARGET_BRANCH" =~ ^release/ ]]; then
            COMMENT_BODY="**Incorrect Base Branch**: Pull request must target a release branch. Current target branch is $TARGET_BRANCH."
            echo "$COMMENT_BODY"
            gh pr comment ${{ github.event.pull_request.number }} --body "$COMMENT_BODY"
            exit 1
          fi
          echo "Pull request is targeting a release branch: $TARGET_BRANCH."
  detect:
    runs-on: ubuntu-latest
    name: 'Identify release version and changelog entry'
    needs: label
    permissions:
      issues: write
      pull-requests: write
      contents: read
    if: needs.label.outputs.release-type != 'no-release'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          path: src
          fetch-depth: 0
      - name: Detect previous version number
        id: prevtag
        working-directory: src
        run: |
          echo "providerversion=$(jq -r '.initialProviderModuleVersion' module-config.json)" >> "$GITHUB_OUTPUT"
          if previousversion=$(git describe --tags --match="[0-9]*" --abbrev=0 HEAD 2>/dev/null); then
            echo "previousversion=$(git describe --tags --match="[0-9]*" --abbrev=0 HEAD)" >> "$GITHUB_OUTPUT"
          else
            echo "previousversion=0.0.0" >> "$GITHUB_OUTPUT"
          fi
      - name: Determine new version number (Standard)
        if: needs.label.outputs.prerelease-type == ''
        uses: actions/github-script@v7
        id: new-version-standard
        env:
          PREV_VERSION: ${{ steps.prevtag.outputs.previousversion }}
          RELEASE_TYPE: ${{ needs.label.outputs.release-type }}
          PROVIDER_VERSION: ${{ steps.prevtag.outputs.providerversion }}
        with:
          script: |
            const script = require('./src/.github/scripts/pr-scripts/plan_new-version.js')
            await script({github, context, core})
          result-encoding: string
      - name: Determine new version number (Pre-Release)
        if: needs.label.outputs.prerelease-type != ''
        uses: actions/github-script@v7
        id: new-version-prerelease
        env:
          PREV_VERSION: ${{ steps.prevtag.outputs.previousversion }}
          RELEASE_TYPE: ${{ needs.label.outputs.release-type }}
          PROVIDER_VERSION: ${{ steps.prevtag.outputs.providerversion }}
          PRERELEASE_TYPE: ${{ needs.label.outputs.prerelease-type }}
        with:
          script: |
            const script = require('./src/.github/scripts/pr-scripts/prerelease_new-version.js')
            await script({github, context, core})
          result-encoding: string
      - name: Store version numbers
        id: store-versions
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          mkdir output
          echo '${{ steps.prevtag.outputs.previousversion }}' > output/previous-version.txt
          if [ -n "${{ steps.new-version-prerelease.outputs.new-version }}" ]; then
            echo "releaseversion=${{ steps.new-version-prerelease.outputs.new-version }}" >> $GITHUB_OUTPUT
            echo "${{ steps.new-version-prerelease.outputs.new-version }}" > output/new-version.txt
          elif [ -n "${{ steps.new-version-standard.outputs.new-version }}" ]; then
            echo "releaseversion=${{ steps.new-version-standard.outputs.new-version }}" >> $GITHUB_OUTPUT
            echo "${{ steps.new-version-standard.outputs.new-version }}" > output/new-version.txt
          else
            echo "No new version determined" >&2
            exit 1
          fi
      - name: Extract changelog entry
        uses: actions/github-script@v7
        id: changelog
        env: 
          releaseversion: ${{ steps.store-versions.outputs.releaseversion }}
          changetype: ${{ needs.label.outputs.change-type }}
        with:
          script: |
            const script = require('./src/.github/scripts/pr-scripts/plan_changelog.js')
            await script({github, context, core})
      - name: Upload result artifacts
        uses: actions/upload-artifact@v4
        with:
          path: output
          retention-days: 5
          name: version-changelog
  comment:
    needs: [detect, label]
    if: needs.label.outputs.is-merge-event == 'false' && needs.label.outputs.release-type != 'no-release'
    permissions:
      issues: write
      pull-requests: write
      contents: read
    runs-on: ubuntu-latest
    name: 'Comment on PR'
    steps:
      - name: Clone Repo to determine previous git tag
        uses: actions/checkout@v4
        with:
          path: src
          fetch-depth: 0
      - uses: actions/download-artifact@v4
        with:
          path: output
      - uses: actions/github-script@v7
        with:
          script: |
            const script = require('./src/.github/scripts/pr-scripts/comment_pr-comment.js')
            await script({github, context, core})
  