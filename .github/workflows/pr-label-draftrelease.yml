name: 'Release: Label and Create Draft'
concurrency:  #avoid concurrent runs on label events, might cause issues on super fast commits
  group: ${{ github.head_ref }}
  cancel-in-progress: true

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled, unlabeled, edited]
    branches:
      - main
  pull_request_target:
    types: [closed]
    branches:
      - main

jobs:
  detect:
    runs-on: ubuntu-latest
    name: 'Detect pull request context'
    outputs:
      release-type: ${{ steps.release-labels.outputs.labels }}
      change-type: ${{ steps.change-labels.outputs.labels }}
      is-merge-event: >-
        ${{ github.event_name == 'pull_request_target'
         && github.event.action == 'closed'
         && github.event.pull_request.merged == true }}
    permissions:
      issues: write
      pull-requests: write
    steps:
      - uses: mheap/github-action-required-labels@v5
        name: Has release type label
        id: release-labels
        with:
          mode: exactly
          count: 1
          labels: "semver:patch, semver:major, semver:minor, no-release, transition"
          add_comment: true
      - name: Has change type label
        uses: mheap/github-action-required-labels@v5
        id: change-labels
        with:
          mode: exactly
          count: 1
          labels: 'feature, enhancement, fix, bugfix, bug, chore'
          add_comment: true
  plan:
    needs: detect
    if: needs.detect.outputs.release-type != 'no-release' && needs.detect.outputs.is-merge-event == 'false'
    runs-on: ubuntu-latest
    name: Module planning
    outputs:
      previousversion: ${{ steps.prevtag.outputs.previousversion }}
      newversion: ${{ steps.new-version.outputs.newversion }}
      providerversion: ${{ steps.prevtag.outputs.providerversion }}
    steps:
      - name: Clone Repo to determine previous git tag
        uses: actions/checkout@v4
        with:
          path: src
          fetch-depth: 0
      - name: Detect previous version number
        id: prevtag
        working-directory: src
        run: |
          echo "providerversion=$(jq -r '.initialProviderModuleVersion' module-config.json)" >> "$GITHUB_OUTPUT"
          if previousversion=$(git describe --tags --match="[0-9]*" --abbrev=0 HEAD 2>/dev/null); then
            echo "previousversion=$(git describe --tags --match="[0-9]*" --abbrev=0 HEAD)" >> "$GITHUB_OUTPUT"
          else
            echo "previousversion=0.0.0" >> "$GITHUB_OUTPUT"
          fi
      - name: Determine new version number
        uses: actions/github-script@v7
        id: new-version
        env:
          PREV_VERSION: ${{ steps.prevtag.outputs.previousversion }}
          RELEASE_TYPE: ${{ needs.detect.outputs.release-type }}
          PROVIDER_VERSION: ${{ steps.prevtag.outputs.providerversion }}
        with:
          script: |
            const script = require('./src/.github/scripts/pr-scripts/plan_new-version.js')
            await script({github, context, core})
          result-encoding: string
      - name: Store version numbers
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          mkdir output
          echo '${{ steps.prevtag.outputs.previousversion }}' > output/previous-version.txt
          echo '${{ steps.new-version.outputs.newversion }}' > output/new-version.txt

      - name: Extract changelog entry
        uses: actions/github-script@v7
        id: changelog
        with:
          script: |
            const script = require('./src/.github/scripts/pr-scripts/plan_changelog.js')
            await script({github, context, core})
 
      - name: Upload result artifacts
        uses: actions/upload-artifact@v4
        with:
          path: output
          retention-days: 5
  comment:
    needs: [detect, plan]
    if: needs.detect.outputs.is-merge-event == 'false' && needs.detect.outputs.release-type != 'no-release'
    permissions:
      issues: write
      pull-requests: write
      contents: read
    runs-on: ubuntu-latest
    name: 'Comment on PR'
    steps:
      - name: Clone Repo to determine previous git tag
        uses: actions/checkout@v4
        with:
          path: src
          fetch-depth: 0
      - uses: actions/download-artifact@v4
        with:
          path: output
      - uses: actions/github-script@v7
        with:
          script: |
            const script = require('./src/.github/scripts/pr-scripts/comment_pr-comment.js')
            await script({github, context, core})
  version-commit:
    needs: [detect,plan,comment]
    if: needs.detect.outputs.is-merge-event == 'false' && needs.detect.outputs.release-type != 'no-release'
    runs-on: ubuntu-latest
    name: Update Release Version and Changelog in Repo
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: output
      - name: "Checkout Repository"
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          path: src
          fetch-depth: 0
      - name: "Update version in module-config.json"
        working-directory: src
        run: |
          if [[ $(jq -r '.version' module-config.json) != ${{ needs.plan.outputs.newversion }} ]]; then
            cat <<< $(jq '.version = $NewVersion' --arg NewVersion "${{ needs.plan.outputs.newversion }}" module-config.json ) > module-config.json
            git config user.name "GitHub Actions Bot"
            git config user.email "<>"
            git add module-config.json
            if ! git diff-index --quiet HEAD; then
              git commit -m "Bot: Updating for release version based on #${{ github.event.pull_request.number }}"
              git push
            fi
          else
            echo "Existing module config file has the correct version of" ${{ needs.plan.outputs.newversion }}
          fi
      - name: "Check if Changelog exists"
        working-directory: src
        run: |
          if test -f "CHANGELOG.md"; then
            echo "CHANGELOG already exists, nothing needs to be created"
          else
            echo "Committing a CHANGELOG file"
            echo -e '# Changelog\r\n\r\n<!-- BEGIN_CHANGELOG_ACTION -->\r\n\r\n<!-- END_CHANGELOG_ACTION -->' > CHANGELOG.md
            git config user.name "GitHub Actions Bot"
            git config user.email "<>"
            git add CHANGELOG.md
            if ! git diff-index --quiet HEAD; then
              git commit -m "Bot: Creating initial CHANGELOG file missing from repo"
              git push
            fi
          fi

      - name: "Create Changelog Entry in README"
        uses: actions/github-script@v7
        env: 
          releaseversion: ${{ needs.plan.outputs.newversion }}
          changetype: ${{ needs.detect.outputs.change-type }}
        with:
          script: |
            const script = require('./src/.github/scripts/pr-scripts/version_readme.js')
            await script({github, context, core})
      - name: Commit Updated Readme
        run: |
          if cmp --silent -- output/README.md src/README.md; then
            echo "No updates need to be made to the README file"
          else
            echo "Updates need to be made to the README"
            cat output/README.md > src/README.md
          fi

          if cmp --silent -- output/CHANGELOG.md src/CHANGELOG.md; then
            echo "No updates need to be made to the CHANGELOG file"
          else
            echo "Updates need to be made to the CHANGELOG file"
            cat output/CHANGELOG.md > src/CHANGELOG.md
          fi
          cd src
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          git add README.md CHANGELOG.md
          if ! git diff-index --quiet HEAD; then
            git commit -m "Bot: Updating README and CHANGELOG for release based on #${{ github.event.pull_request.number }}"
            git push
          fi
  release-draft:
    needs: [detect, plan, comment]
    if: needs.detect.outputs.is-merge-event == 'false' && needs.detect.outputs.release-type != 'no-release'
    runs-on: ubuntu-latest
    name: Create Draft Release with Notes
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          path: src
          fetch-depth: 0
      - uses: actions/download-artifact@v4
        with:
          path: output
      - name: Create Draft Release
        uses: actions/github-script@v7
        env: 
          releaseversion: ${{ needs.plan.outputs.newversion }}
        with:
          script: |
            const script = require('./src/.github/scripts/pr-scripts/release_draft.js')
            await script({github, context, core})
